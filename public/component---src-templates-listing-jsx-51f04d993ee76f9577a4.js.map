{"version":3,"sources":["webpack://gatsby-starter-advanced/./src/components/PostListing/PostListing.jsx","webpack://gatsby-starter-advanced/./src/templates/listing.jsx"],"names":["postEdges","postList","forEach","postEdge","push","path","node","fields","slug","tags","frontmatter","cover","title","date","excerpt","timeToRead","map","post","Link","to","key","currentPageNum","pageCount","prevPage","nextPage","isFirstPage","isLastPage","pageContext","data","allMarkdownRemark","edges","className","config","Array","_val","index","pageNum"],"mappings":"+JA+BA,IA5BA,YAAqC,IAAdA,EAAa,EAAbA,UACfC,EAAW,GAajB,OAZAD,EAAUE,SAAQ,SAACC,GACjBF,EAASG,KAAK,CACZC,KAAMF,EAASG,KAAKC,OAAOC,KAC3BC,KAAMN,EAASG,KAAKI,YAAYD,KAChCE,MAAOR,EAASG,KAAKI,YAAYC,MACjCC,MAAOT,EAASG,KAAKI,YAAYE,MACjCC,KAAMV,EAASG,KAAKC,OAAOM,KAC3BC,QAASX,EAASG,KAAKQ,QACvBC,WAAYZ,EAASG,KAAKS,gBAK5B,2BAGId,EAASe,KAAI,SAACC,GAAD,OACX,gBAAC,EAAAC,KAAD,CAAMC,GAAIF,EAAKZ,KAAMe,IAAKH,EAAKL,OAC7B,0BAAKK,EAAKL,c,qIC6BtB,UA3CA,YAAyC,IAE7BS,EAAgBC,EAClBC,EACAC,EACAC,EACAC,EANSC,EAAqB,EAArBA,YA2BX3B,EA3BgC,EAAR4B,KA2BPC,kBAAkBC,MAEzC,OACE,gBAAC,IAAD,KACE,uBAAKC,UAAU,qBACb,uBAAKA,UAAU,mBACb,gBAAC,IAAD,CAAQnB,MAAOoB,gBACf,gBAAC,IAAD,MACA,gBAAC,IAAD,CAAahC,UAAWA,MAjCtBqB,EAA8BM,EAA9BN,eAAgBC,EAAcK,EAAdL,UAClBC,EAAWF,EAAiB,GAAM,EAAI,IAA3B,KAAqCA,EAAiB,GAAtD,IACXG,EAAQ,KAAOH,EAAiB,GAAxB,IACRI,EAAiC,IAAnBJ,EACdK,EAAaL,IAAmBC,EAGpC,uBAAKS,UAAU,qBACXN,GAAe,gBAAC,EAAAP,KAAD,CAAMC,GAAII,GAAV,aAChB,OAAIU,MAAMX,IAAYN,KAAI,SAACkB,EAAMC,GAChC,IAAMC,EAAUD,EAAQ,EACxB,OACE,gBAAC,EAAAjB,KAAD,CACEE,IAAG,gBAAkBgB,EACrBjB,GAAgB,IAAZiB,EAAgB,IAAhB,IAA0BA,EAA1B,KAEHA,OAILV,GAAc,gBAAC,EAAAR,KAAD,CAAMC,GAAIK,GAAV","file":"component---src-templates-listing-jsx-51f04d993ee76f9577a4.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"gatsby\";\n\nfunction PostListing({ postEdges }) {\n  const postList = [];\n  postEdges.forEach((postEdge) => {\n    postList.push({\n      path: postEdge.node.fields.slug,\n      tags: postEdge.node.frontmatter.tags,\n      cover: postEdge.node.frontmatter.cover,\n      title: postEdge.node.frontmatter.title,\n      date: postEdge.node.fields.date,\n      excerpt: postEdge.node.excerpt,\n      timeToRead: postEdge.node.timeToRead,\n    });\n  });\n\n  return (\n    <div>\n      {\n        /* Your post list here. */\n        postList.map((post) => (\n          <Link to={post.path} key={post.title}>\n            <h1>{post.title}</h1>\n          </Link>\n        ))\n      }\n    </div>\n  );\n}\n\nexport default PostListing;\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { graphql, Link } from \"gatsby\";\nimport Layout from \"../layout\";\nimport PostListing from \"../components/PostListing/PostListing\";\nimport SEO from \"../components/SEO/SEO\";\nimport config from \"../../data/SiteConfig\";\nimport \"./listing.css\";\n\nfunction Listing({ pageContext, data }) {\n  function renderPaging() {\n    const { currentPageNum, pageCount } = pageContext;\n    const prevPage = currentPageNum - 1 === 1 ? \"/\" : `/${currentPageNum - 1}/`;\n    const nextPage = `/${currentPageNum + 1}/`;\n    const isFirstPage = currentPageNum === 1;\n    const isLastPage = currentPageNum === pageCount;\n\n    return (\n      <div className=\"paging-container\">\n        {!isFirstPage && <Link to={prevPage}>Previous</Link>}\n        {[...Array(pageCount)].map((_val, index) => {\n          const pageNum = index + 1;\n          return (\n            <Link\n              key={`listing-page-${pageNum}`}\n              to={pageNum === 1 ? \"/\" : `/${pageNum}/`}\n            >\n              {pageNum}\n            </Link>\n          );\n        })}\n        {!isLastPage && <Link to={nextPage}>Next</Link>}\n      </div>\n    );\n  }\n\n  const postEdges = data.allMarkdownRemark.edges;\n\n  return (\n    <Layout>\n      <div className=\"listing-container\">\n        <div className=\"posts-container\">\n          <Helmet title={config.siteTitle} />\n          <SEO />\n          <PostListing postEdges={postEdges} />\n        </div>\n        {renderPaging()}\n      </div>\n    </Layout>\n  );\n}\n\nexport default Listing;\n\n/* eslint no-undef: \"off\" */\nexport const listingQuery = graphql`\n  query ListingQuery($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            date\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover\n            date\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}